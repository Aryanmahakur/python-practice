import speech_recognition as sr
import pyttsx3
import webbrowser
import datetime
import requests
import os
from openai import OpenAI

# Load API Keys securely from environment variables
api_key = os.environ.get("OPENAI_API_KEY")  # Ensure this is set in the environment
newsapi_key = os.environ.get("NEWS_API_KEY")

# Initialize OpenAI client
if not api_key:
    print("Error: OpenAI API Key not found in environment variables.")
    exit()
client = OpenAI(api_key=api_key)

# Initialize speech recognition and text-to-speech engine
recognizer = sr.Recognizer()
tts_engine = pyttsx3.init()

# Define the music library
music = {
    "let her go": "https://youtu.be/HTcL9WkB_wg"
}

def speak(text):
    """Convert text to speech with proper handling."""
    try:
        tts_engine.say(text)
        tts_engine.runAndWait()
    except Exception as e:
        print(f"Speech error: {e}")

def get_news():
    """Fetch and read aloud the top news headlines."""
    if not newsapi_key:
        speak("News API key is missing. Unable to fetch news.")
        return
    
    url = f"https://newsapi.org/v2/top-headlines?country=in&apiKey={newsapi_key}"
    try:
        response = requests.get(url, timeout=5)
        news_data = response.json()
        
        if news_data.get("status") == "ok":
            articles = news_data["articles"][:5]  # Get top 5 headlines
            news_headlines = [article["title"] for article in articles]

            if news_headlines:
                speak("Here are the top news headlines:")
                for i, headline in enumerate(news_headlines, start=1):
                    print(f"{i}. {headline}")
                    speak(headline)
            else:
                speak("Sorry, no news available at the moment.")
        else:
            speak("Error fetching news.")
    except requests.exceptions.RequestException as e:
        print(f"News API error: {e}")
        speak("An error occurred while fetching news.")

def ask_openai(question):
    """Use OpenAI GPT-4 to answer general questions with better error handling."""
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": question}]
        )
        answer = response.choices[0].message.content
        return answer
    except Exception as e:
        print(f"OpenAI API error: {e}")
        return "I'm sorry, I couldn't process your request."

def process_command(command):
    """Process voice commands and execute corresponding actions."""
    if "open google" in command:
        webbrowser.open("https://www.google.com")
        speak("Opening Google")

    elif "open youtube" in command:
        webbrowser.open("https://www.youtube.com")
        speak("Opening YouTube")

    elif "play" in command:
        song = command.replace("play", "").strip()
        if song in music:
            webbrowser.open(music[song])
            speak(f"Playing {song}")
        else:
            speak(f"Sorry, I don't have {song} in my library.")

    elif "what is the time" in command:
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        speak(f"The current time is {current_time}")

    elif "news" in command:
        get_news()

    elif "exit" in command or "quit" in command:
        speak("Exiting Jarvis. Have a nice day!")
        return True  # Exit the loop

    else:
        speak("Let me check...")
        response = ask_openai(command)
        print(f"Jarvis: {response}")
        speak(response)

    return False  # Continue listening

def listen_for_command():
    """Listen for voice commands and return recognized text with error handling."""
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source)
        print("Listening for command...")
        try:
            audio = recognizer.listen(source, timeout=5)  # Added timeout to avoid indefinite waiting
            command = recognizer.recognize_google(audio).lower()
            print(f"Recognized: {command}")
            return command
        except sr.UnknownValueError:
            print("Google could not understand the audio")
            speak("Sorry, I didn't catch that. Please try again.")
            return None
        except sr.RequestError:
            print("Could not request results from Google Speech Recognition service")
            speak("I am facing connectivity issues.")
            return None
        except Exception as e:
            print(f"Error: {e}")
            return None

if __name__ == "__main__":
    speak("Initializing Jarvis")

    while True:
        print("Say 'Jarvis' to activate...")
        with sr.Microphone() as source:
            recognizer.adjust_for_ambient_noise(source)
            try:
                audio = recognizer.listen(source, timeout=5)
                wake_word = recognizer.recognize_google(audio).lower()
                print(f"Detected: {wake_word}")

                if "jarvis" in wake_word:
                    speak("Yes, how can I assist you?")
                    command = listen_for_command()

                    if command:
                        exit_flag = process_command(command)
                        if exit_flag:
                            break
            except sr.UnknownValueError:
                print("Wake word not recognized")
            except sr.RequestError:
                print("Speech recognition service unavailable")
            except Exception as e:
                print(f"Error: {e}")
                print("hy")